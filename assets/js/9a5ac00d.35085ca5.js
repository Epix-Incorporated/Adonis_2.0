"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[419],{16539:function(e){e.exports=JSON.parse('{"functions":[{"name":"RunFunction","desc":"Runs the given function and calls FormatError for any errors.","params":[{"name":"func","desc":"The function to run","lua_type":"function"},{"name":"...","desc":"Package arguments","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":46,"path":"src/MainModule/PackageHandler.lua"}},{"name":"GetMetadata","desc":"Returns the metadata for a given package","params":[{"name":"Package","desc":"The package folder we\'re getting metadata from.","lua_type":"Folder"}],"returns":[{"desc":"Metadata table","lua_type":"table"}],"function_type":"static","source":{"line":61,"path":"src/MainModule/PackageHandler.lua"}},{"name":"GetServerPackages","desc":"For a given folder, returns a list of all packages within that folder which are intended to be ran by the server.\\nResult table format: {[name .. \\"==\\" .. version] = package }","params":[{"name":"Packages","desc":"Table containing packages from which we will extract only server packages.","lua_type":"table"}],"returns":[{"desc":"Table containing found server packages.","lua_type":"table"}],"function_type":"static","source":{"line":80,"path":"src/MainModule/PackageHandler.lua"}},{"name":"GetClientPackages","desc":"For a given folder, returns a list of all packages within that folder which are intended to be ran by the client.\\nResult table format: {[name .. \\"==\\" .. version] = package }","params":[{"name":"Packages","desc":"Table containing packages to extract client packages from.","lua_type":"table"}],"returns":[{"desc":"Table containing found client packages.","lua_type":"table"}],"function_type":"static","source":{"line":112,"path":"src/MainModule/PackageHandler.lua"}},{"name":"StripPackages","desc":"Given a list of packages, this method will remove anything matching the provided \\"Remove\\" string and return a list of package clones without the removed object\\nThis is primarily used to strip the \\"Server\\" folder from packages which are shared by the server and client before sending said packages to the client","params":[{"name":"Packages","desc":"Table containing packages.","lua_type":"table"},{"name":"Remove","desc":"Name of children to remove.","lua_type":"string"}],"returns":[{"desc":"Packages that were stripped.","lua_type":"table"}],"function_type":"static","source":{"line":139,"path":"src/MainModule/PackageHandler.lua"}},{"name":"FindDependency","desc":"Given a list of packages (Packages), a package name (DepedencyName), and a package version (DepdencyVersion.)\\nChecks if any packages in the provided package list match the provided name and version.\\nThis is used during dependency resolution.","params":[{"name":"Packages","desc":"Table of packages.","lua_type":"table"},{"name":"DependencyName","desc":"Searches for this dependency name.","lua_type":"string"},{"name":"DependencyVersion","desc":"Searches for this depdendency version (optional.)","lua_type":"number"}],"returns":[{"desc":"Returns the found package string (name==version) and the package itself.","lua_type":"string, package"}],"function_type":"static","source":{"line":168,"path":"src/MainModule/PackageHandler.lua"}},{"name":"CheckDependencies","desc":"Given a list of packages (Packages) and a package (Package) checks if the package\'s depdencies are in the given package list\\nThis is used when loading packages to check if a given package\'s dependencies were correctly resolved and loaded before attempting to load the package that needs them\\nreturn bool -- Returns true if package passes dependency check and returns false if it fails.","params":[{"name":"Packages","desc":"Table of packages","lua_type":"table"},{"name":"Package","desc":"Package","lua_type":"Folder"}],"returns":[],"function_type":"static","source":{"line":193,"path":"src/MainModule/PackageHandler.lua"}},{"name":"GetOrderedPackageList","desc":"Given a table of packages (Packages), Resolves package dependencies and produces an ordered list the places packages after all of their dependencies.\\nThe results of this method determine load order, based on depedency resolution.","params":[{"name":"Packages","desc":"Table of packages","lua_type":"table"}],"returns":[{"desc":"Ordered table of packages based on depdency resolution.","lua_type":"table"}],"function_type":"static","source":{"line":281,"path":"src/MainModule/PackageHandler.lua"}},{"name":"InitPackage","desc":"Given a package (Package) and a PackageType (Server, Client) this method will find and required the Initializer module for the given package and return the package\'s Init & AfterInit functions in a table.\\nreturn table -- Returned package init table","params":[{"name":"Package","desc":"Package to initialize","lua_type":"Folder"},{"name":"PackageType","desc":"Package type (Client or Server)","lua_type":"string"},{"name":"...","desc":"Package arguments","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":302,"path":"src/MainModule/PackageHandler.lua"}},{"name":"LoadPackages","desc":"Given a table of packages, performs dependency resolution and loads all packages provided matching PackageType in order.","params":[{"name":"Packages","desc":"Table of packages","lua_type":"table"},{"name":"PackageType","desc":"Package type (Server, Client)","lua_type":"string"},{"name":"...","desc":"Package arguments","lua_type":"any"}],"returns":[],"function_type":"static","source":{"line":331,"path":"src/MainModule/PackageHandler.lua"}}],"properties":[],"types":[],"name":"PackageHandler","desc":"Responsible for package dependency resolution and package initialization.","source":{"line":11,"path":"src/MainModule/PackageHandler.lua"}}')}}]);