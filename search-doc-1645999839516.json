[{"title":"Client.Bytecode","type":0,"sectionRef":"#","url":"api/Client.Bytecode","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Bytecode","url":"api/Client.Bytecode#functions","content":" "},{"title":"GetVirtualEnv​","type":1,"pageTitle":"Client.Bytecode","url":"api/Client.Bytecode#GetVirtualEnv","content":"&lt;/&gt; Client.Bytecode:GetVirtualEnv(returnInstance: Instance ) → () Gets a virtual env instead of a function env to not disable optimisations  "},{"title":"LoadBytecode​","type":1,"pageTitle":"Client.Bytecode","url":"api/Client.Bytecode#LoadBytecode","content":"&lt;/&gt; Client.Bytecode:LoadBytecode() → () Load bytecode "},{"title":"Client.Core","type":0,"sectionRef":"#","url":"api/Client.Core","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Core","url":"api/Client.Core#functions","content":" "},{"title":"DeclareSetting​","type":1,"pageTitle":"Client.Core","url":"api/Client.Core#DeclareSetting","content":"&lt;/&gt; Client.Core:DeclareSetting( setting: string,-- Setting to declare data: table-- Setting information table ) → () Declare new settings, their default value, and their description  "},{"title":"SettingsIndex​","type":1,"pageTitle":"Client.Core","url":"api/Client.Core#SettingsIndex","content":"&lt;/&gt; Client.Core:SettingsIndex( tab: table, ind: string-- Setting ) → any-- Default setting value If a setting is not found, this is responsible for returning a value for it (or possibly, also setting it)  "},{"title":"GetAllSettings​","type":1,"pageTitle":"Client.Core","url":"api/Client.Core#GetAllSettings","content":"&lt;/&gt; Client.Core:GetAllSettings() → table-- All settings in the format [setting] = value Returns all currently known settings  "},{"title":"UpdateSetting​","type":1,"pageTitle":"Client.Core","url":"api/Client.Core#UpdateSetting","content":"&lt;/&gt; Client.Core:UpdateSetting( setting: string,-- Setting value: any-- Value ) → () Updates the specified setting to the new value "},{"title":"Client.Process","type":0,"sectionRef":"#","url":"api/Client.Process","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#functions","content":" "},{"title":"PlayerAdded​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#PlayerAdded","content":"&lt;/&gt; Client.Process:PlayerAdded( p: Player -- Player ) → () PlayerAdded event handler  "},{"title":"PlayerRemoving​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#PlayerRemoving","content":"&lt;/&gt; Client.Process:PlayerRemoving( p: Player -- Player ) → () PlayerRemoving event handler  "},{"title":"PlayerRemoved​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#PlayerRemoved","content":"&lt;/&gt; Client.Process:PlayerRemoved( p: Player -- Player ) → () PlayerRemoved event handler  "},{"title":"CharacterAdded​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#CharacterAdded","content":"&lt;/&gt; Client.Process:CharacterAdded( p: Player ,-- Player c: Character-- Character ) → () CharacterAdded event handler  "},{"title":"CharacterRemoving​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#CharacterRemoving","content":"&lt;/&gt; Client.Process:CharacterRemoving( p: Player , c: Character ) → () CharacterRemoving event handler  "},{"title":"LogMessage​","type":1,"pageTitle":"Client.Process","url":"api/Client.Process#LogMessage","content":"&lt;/&gt; Client.Process:LogMessage( msg: string,-- Message string msgType: Enum ,-- MessageType ...: any ) → () MessageOut event handler "},{"title":"Client.Remote.Commands","type":0,"sectionRef":"#","url":"api/Client.Remote.Commands","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#functions","content":" "},{"title":"RunBytecode​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#RunBytecode","content":"Remote Command &lt;/&gt; Client.Remote.Commands.RunBytecode( str: string,-- Bytecode to execute ...: any-- Additional arguments ) → any-- Anything returned by executed bytecode Run bytecode  "},{"title":"SessionData​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#SessionData","content":"Remote Command &lt;/&gt; Client.Remote.Commands.SessionData( sessionKey: string,-- Session key ...: any-- Arguments ) → () Sends data to an active session (if any)  "},{"title":"ErrorMessages​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#ErrorMessages","content":"Remote Command &lt;/&gt; Client.Remote.Commands.ErrorMessages( data: table-- Error data ) → () Gives a server error to the client.  "},{"title":"DeclareSettings​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#DeclareSettings","content":"Remote Command &lt;/&gt; Client.Remote.Commands.DeclareSettings( settings: table-- Table of settings in the format of [setting] = value ) → () Declares settings and their values to the client  "},{"title":"UpdateSetting​","type":1,"pageTitle":"Client.Remote.Commands","url":"api/Client.Remote.Commands#UpdateSetting","content":"Remote Command &lt;/&gt; Client.Remote.Commands.UpdateSetting( setting: string,-- Setting value: any-- Value ) → () Updates a specific setting "},{"title":"Client.Remote","type":0,"sectionRef":"#","url":"api/Client.Remote","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#functions","content":" "},{"title":"Send​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#Send","content":"&lt;/&gt; Client.Remote:Send( cmd: string,-- Remote command ...: any-- Arguments ) → () Sends a remote command to the server  "},{"title":"Get​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#Get","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client.Remote:Get( cmd: string,-- Remote command ...: any-- Arguments ) → result Sends a remote command to the server and returns the result  "},{"title":"GetSession​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#GetSession","content":"&lt;/&gt; Client.Remote:GetSession( sessionKey: string-- Session key ) → ClientSession Gets a session handler for the supplied session key (if session exists)  "},{"title":"ProcessRemoteCommand​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#ProcessRemoteCommand","content":"&lt;/&gt; Client.Remote:ProcessRemoteCommand( cmd: string,-- Remote command to run args: table-- Arguments table ) → any-- Returns whatever the triggered remote command returns (if anything) Responsible for handling of received remote commands  "},{"title":"WaitForEvent​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#WaitForEvent","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client.Remote:WaitForEvent() → () Responsible for yielding until the system's RemoteEvent and RemoteFunction objects are found.  "},{"title":"EventChangeDetected​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#EventChangeDetected","content":"&lt;/&gt; Client.Remote:EventChangeDetected( c: string-- Property changed ) → () Remote object OnChange event handler  "},{"title":"SetupRemote​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#SetupRemote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client.Remote:SetupRemote() → () Responsible for finding and connecting to system communication objects.  "},{"title":"UpdateRemoteKey​","type":1,"pageTitle":"Client.Remote","url":"api/Client.Remote#UpdateRemoteKey","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client.Remote:UpdateRemoteKey() → () Obtains remote key from the server if it hasn't already been obtained. "},{"title":"ClientSession","type":0,"sectionRef":"#","url":"api/ClientSession","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#properties","content":" "},{"title":"Events​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#Events","content":"&lt;/&gt; ClientSession.Events: {} Session event connections that will be cleaned up on session end.  "},{"title":"SessionKey​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#SessionKey","content":"&lt;/&gt; ClientSession.SessionKey: string Session key.  "},{"title":"SessionEvent​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#SessionEvent","content":"&lt;/&gt; ClientSession.SessionEvent: BindableEvent  Session event object. "},{"title":"Functions​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#functions","content":" "},{"title":"SendToServer​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#SendToServer","content":"&lt;/&gt; ClientSession:SendToServer( self: table, ...: any ) → () Send data to the server  "},{"title":"FireEvent​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#FireEvent","content":"&lt;/&gt; ClientSession:FireEvent( self: table, ...: any ) → () Fire session event  "},{"title":"ConnectEvent​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#ConnectEvent","content":"&lt;/&gt; ClientSession:ConnectEvent( self: table, func: function-- Function to connect ) → () Connect session event  "},{"title":"End​","type":1,"pageTitle":"ClientSession","url":"api/ClientSession#End","content":"&lt;/&gt; ClientSession:End(self: table) → () End session "},{"title":"Event","type":0,"sectionRef":"#","url":"api/Event","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Event","url":"api/Event#properties","content":" "},{"title":"EventName​","type":1,"pageTitle":"Event","url":"api/Event#EventName","content":"&lt;/&gt; Event.EventName: string Event name "},{"title":"Functions​","type":1,"pageTitle":"Event","url":"api/Event#functions","content":" "},{"title":"Connect​","type":1,"pageTitle":"Event","url":"api/Event#Connect","content":"&lt;/&gt; Event:Connect( func: function-- Function to connect ) → () Connect event  "},{"title":"Wait​","type":1,"pageTitle":"Event","url":"api/Event#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Event:Wait() → () Waits for the event to fire  "},{"title":"Fire​","type":1,"pageTitle":"Event","url":"api/Event#Fire","content":"&lt;/&gt; Event:Fire(...: any) → () Fires the event, triggering and sending data to any connected function.  "},{"title":"Destroy​","type":1,"pageTitle":"Event","url":"api/Event#Destroy","content":"&lt;/&gt; Event:Destroy() → () Destroys all connections for the event. "},{"title":"MemoryCache","type":0,"sectionRef":"#","url":"api/MemoryCache","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#types","content":" "},{"title":"CacheEntryData​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#CacheEntryData","content":"&lt;/&gt; interface CacheEntryData { Value: any-- Cache entry value Timeout: int-- Optional timeout for this specific cache entry AccessResetsTimer: bool-- If true, this entry's timeout timer will be reset whenever data is accessed CacheTime: int-- os.time() when the cache was last updated (or accessed) } Responsible for configuration of individual cache entries. "},{"title":"Functions​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#functions","content":" "},{"title":"CleanCache​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#CleanCache","content":"&lt;/&gt; MemoryCache:CleanCache() → () Clears any expired cache entries. This is called automatically when data is set.  "},{"title":"SetData​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#SetData","content":"&lt;/&gt; MemoryCache:SetData( key: any,-- Cache key used to update and retrieve stored values value: any,-- Value to store data: CacheEntryData-- Optional table describing how to handle stored data ) → () Sets the given index in the cache to the value provided.  "},{"title":"GetData​","type":1,"pageTitle":"MemoryCache","url":"api/MemoryCache#GetData","content":"&lt;/&gt; MemoryCache:GetData(key: any) → any Returns the value associated with the provided key. "},{"title":"Server.Bytecode","type":0,"sectionRef":"#","url":"api/Server.Bytecode","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Bytecode","url":"api/Server.Bytecode#functions","content":" "},{"title":"GetLoadstring​","type":1,"pageTitle":"Server.Bytecode","url":"api/Server.Bytecode#GetLoadstring","content":"&lt;/&gt; Server.Bytecode:GetLoadstring() → function Clones and requires the loadstring module, returning it's main function.  "},{"title":"GetBytecode​","type":1,"pageTitle":"Server.Bytecode","url":"api/Server.Bytecode#GetBytecode","content":"&lt;/&gt; Server.Bytecode:GetBytecode( str: string-- Lua code to convert to bytecode equivalent ) → Bytecode Given a string of lua code, returns bytecode.  "},{"title":"GetVirtualEnv​","type":1,"pageTitle":"Server.Bytecode","url":"api/Server.Bytecode#GetVirtualEnv","content":"&lt;/&gt; Server.Bytecode:GetVirtualEnv(returnInstance: bool) → () Gets a virtual env instead of a function env to not disable optimisations return environment  "},{"title":"LoadBytecode​","type":1,"pageTitle":"Server.Bytecode","url":"api/Server.Bytecode#LoadBytecode","content":"&lt;/&gt; Server.Bytecode:LoadBytecode( bytecode: string, envData: table-- Environment ) → result Load bytecode "},{"title":"PackageHandler","type":0,"sectionRef":"#","url":"api/PackageHandler","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#functions","content":" "},{"title":"RunFunction​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#RunFunction","content":"&lt;/&gt; PackageHandler.RunFunction( func: function,-- The function to run ...: any-- Package arguments ) → () Runs the given function and calls FormatError for any errors.  "},{"title":"GetMetadata​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetMetadata","content":"&lt;/&gt; PackageHandler.GetMetadata( Package: Folder -- The package folder we're getting metadata from. ) → table-- Metadata table Returns the metadata for a given package  "},{"title":"GetServerPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetServerPackages","content":"&lt;/&gt; PackageHandler.GetServerPackages( Packages: table-- Table containing packages from which we will extract only server packages. ) → table-- Table containing found server packages. For a given folder, returns a list of all packages within that folder which are intended to be ran by the server. Result table format: {[name .. &quot;==&quot; .. version] = package }  "},{"title":"GetClientPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetClientPackages","content":"&lt;/&gt; PackageHandler.GetClientPackages( Packages: table-- Table containing packages to extract client packages from. ) → table-- Table containing found client packages. For a given folder, returns a list of all packages within that folder which are intended to be ran by the client. Result table format: {[name .. &quot;==&quot; .. version] = package }  "},{"title":"StripPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#StripPackages","content":"&lt;/&gt; PackageHandler.StripPackages( Packages: table,-- Table containing packages. Remove: string-- Name of children to remove. ) → table-- Packages that were stripped. Given a list of packages, this method will remove anything matching the provided &quot;Remove&quot; string and return a list of package clones without the removed object This is primarily used to strip the &quot;Server&quot; folder from packages which are shared by the server and client before sending said packages to the client  "},{"title":"FindDependency​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#FindDependency","content":"&lt;/&gt; PackageHandler.FindDependency( Packages: table,-- Table of packages. DependencyName: string,-- Searches for this dependency name. DependencyVersion: number-- Searches for this depdendency version (optional.) ) → string,package-- Returns the found package string (name==version) and the package itself. Given a list of packages (Packages), a package name (DepedencyName), and a package version (DepdencyVersion.) Checks if any packages in the provided package list match the provided name and version. This is used during dependency resolution.  "},{"title":"CheckDependencies​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#CheckDependencies","content":"&lt;/&gt; PackageHandler.CheckDependencies( Packages: table,-- Table of packages Package: Folder -- Package ) → () Given a list of packages (Packages) and a package (Package) checks if the package's depdencies are in the given package list This is used when loading packages to check if a given package's dependencies were correctly resolved and loaded before attempting to load the package that needs them return bool -- Returns true if package passes dependency check and returns false if it fails.  "},{"title":"GetOrderedPackageList​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetOrderedPackageList","content":"&lt;/&gt; PackageHandler.GetOrderedPackageList( Packages: table-- Table of packages ) → table-- Ordered table of packages based on depdency resolution. Given a table of packages (Packages), Resolves package dependencies and produces an ordered list the places packages after all of their dependencies. The results of this method determine load order, based on depedency resolution.  "},{"title":"InitPackage​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#InitPackage","content":"&lt;/&gt; PackageHandler.InitPackage( Package: Folder ,-- Package to initialize PackageType: string,-- Package type (Client or Server) ...: any-- Package arguments ) → () Given a package (Package) and a PackageType (Server, Client) this method will find and required the Initializer module for the given package and return the package's Init &amp; AfterInit functions in a table. return table -- Returned package init table  "},{"title":"LoadPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#LoadPackages","content":"&lt;/&gt; PackageHandler.LoadPackages( Packages: table,-- Table of packages PackageType: string,-- Package type (Server, Client) ...: any-- Package arguments ) → () Given a table of packages, performs dependency resolution and loads all packages provided matching PackageType in order. "},{"title":"Server.Core","type":0,"sectionRef":"#","url":"api/Server.Core","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#functions","content":" "},{"title":"DeclareDefaultPlayerData​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#DeclareDefaultPlayerData","content":"&lt;/&gt; Server.Core:DeclareDefaultPlayerData( ind: string,-- PlayerData index defaultValue: any-- Default player data value (can be function which returns data (use for tables)) ) → () Declares default player data  "},{"title":"DeclarePlayerPreLoadProcess​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#DeclarePlayerPreLoadProcess","content":"&lt;/&gt; Server.Core:DeclarePlayerPreLoadProcess( ind: string,-- PreLoad function name func: function-- PreLoad function ) → () Declares player pre-loading process functions  "},{"title":"DeclarePlayerDataHandler​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#DeclarePlayerDataHandler","content":"&lt;/&gt; Server.Core:DeclarePlayerDataHandler( ind: string,-- Handler name func: function-- Handler function ) → () Declares player data handler functions  "},{"title":"HandlePlayerPreLoadingProcesses​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#HandlePlayerPreLoadingProcesses","content":"&lt;/&gt; Server.Core:HandlePlayerPreLoadingProcesses( p: Player -- Player to perform processes for ) → () Handles player pre-loading processes  "},{"title":"DefaultPlayerData​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#DefaultPlayerData","content":"&lt;/&gt; Server.Core:DefaultPlayerData(p: Player ) → PlayerData Generates and returns default player data for the provided Player  "},{"title":"GetPlayerData​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#GetPlayerData","content":"&lt;/&gt; Server.Core:GetPlayerData(p: Player ) → PlayerData Returns data for the provided Player  "},{"title":"DeclareSetting​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#DeclareSetting","content":"&lt;/&gt; Server.Core:DeclareSetting( setting: string,-- Setting data: table-- Setting data table ) → () Declare new settings, their default value, and their description  "},{"title":"SettingsIndex​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#SettingsIndex","content":"&lt;/&gt; Server.Core:SettingsIndex( tab: table, ind: string-- Setting ) → DefaultSettingValue If a setting is not found, this is responsible for returning a value for it (or possibly, also setting it)  "},{"title":"GetAllSettings​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#GetAllSettings","content":"&lt;/&gt; Server.Core:GetAllSettings() → () Returns all known settings  "},{"title":"GetSharedSettings​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#GetSharedSettings","content":"&lt;/&gt; Server.Core:GetSharedSettings(p: Player ) → settings Get settings which should be shared with the client for the provided Player  "},{"title":"UpdateSetting​","type":1,"pageTitle":"Server.Core","url":"api/Server.Core#UpdateSetting","content":"&lt;/&gt; Server.Core:UpdateSetting( setting: string, value: any, save: bool-- Whether or not this should be saved; Only takes effect if System.Data package is loaded ) → () Update the specified setting to the provided value "},{"title":"Server.CrossServer.Commands","type":0,"sectionRef":"#","url":"api/Server.CrossServer.Commands","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.CrossServer.Commands","url":"api/Server.CrossServer.Commands#functions","content":" "},{"title":"Ping​","type":1,"pageTitle":"Server.CrossServer.Commands","url":"api/Server.CrossServer.Commands#Ping","content":"Cross-Server Command &lt;/&gt; Server.CrossServer.Commands.Ping( jobId: string,-- Origin server's JobID data: any-- Data sent by the origin server ) → () Runs when a &quot;Ping&quot; command is received, announcing this server's presence to other servers.  "},{"title":"Pong​","type":1,"pageTitle":"Server.CrossServer.Commands","url":"api/Server.CrossServer.Commands#Pong","content":"Cross-Server Command &lt;/&gt; Server.CrossServer.Commands.Pong( jobId: string,-- Origin server JobID data: any-- Data sent by the origin server ) → () Response to &quot;Ping&quot; from other servers "},{"title":"Server.CrossServer","type":0,"sectionRef":"#","url":"api/Server.CrossServer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.CrossServer","url":"api/Server.CrossServer#functions","content":" "},{"title":"SendMessage​","type":1,"pageTitle":"Server.CrossServer","url":"api/Server.CrossServer#SendMessage","content":"&lt;/&gt; Server.CrossServer:SendMessage(...: any) → () Send cross-server message  "},{"title":"ProcessCrossServerMessage​","type":1,"pageTitle":"Server.CrossServer","url":"api/Server.CrossServer#ProcessCrossServerMessage","content":"&lt;/&gt; Server.CrossServer:ProcessCrossServerMessage( msg: string-- Message ) → () Handles cross-server messages "},{"title":"Server.Logging","type":0,"sectionRef":"#","url":"api/Server.Logging","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Logging","url":"api/Server.Logging#functions","content":" "},{"title":"AddLog​","type":1,"pageTitle":"Server.Logging","url":"api/Server.Logging#AddLog","content":"&lt;/&gt; Server.Logging:AddLog( logType: string,-- Log type (Script, Command, etc) logEntry: { Text: string?, Description: string?, Time: number?, NoTime: boolean? } | string,-- Log entry ...: any-- Additional data ) → () Adds a new log of specified type  "},{"title":"GetLogs​","type":1,"pageTitle":"Server.Logging","url":"api/Server.Logging#GetLogs","content":"&lt;/&gt; Server.Logging:GetLogs( Type: string-- Log type ) → LogTable Returns logs of Type "},{"title":"Server.Process","type":0,"sectionRef":"#","url":"api/Server.Process","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#functions","content":" "},{"title":"PlayerAdded​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#PlayerAdded","content":"&lt;/&gt; Server.Process:PlayerAdded(p: Player ) → () PlayerAdded event handler  "},{"title":"PlayerChatted​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#PlayerChatted","content":"&lt;/&gt; Server.Process:PlayerChatted(p: Player ) → () PlayerChatted event handler  "},{"title":"PlayerReady​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#PlayerReady","content":"&lt;/&gt; Server.Process:PlayerReady(p: Player ) → () PleaseReady event handler  "},{"title":"PlayerRemoving​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#PlayerRemoving","content":"&lt;/&gt; Server.Process:PlayerRemoving(p: Player ) → () PlayerRemoving event handler  "},{"title":"PlayerRemoved​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#PlayerRemoved","content":"&lt;/&gt; Server.Process:PlayerRemoved(p: Player? ) → () PlayerRemoved event handler  "},{"title":"CharacterAdded​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#CharacterAdded","content":"&lt;/&gt; Server.Process:CharacterAdded(p: Player ) → () CharacterAdded event handler  "},{"title":"CharacterRemoving​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#CharacterRemoving","content":"&lt;/&gt; Server.Process:CharacterRemoving( p: Player , ...: any ) → () CharacterRemoving event handler  "},{"title":"NetworkAdded​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#NetworkAdded","content":"&lt;/&gt; Server.Process:NetworkAdded(...: any) → () NetworkAdded event handler  "},{"title":"NetworkRemoved​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#NetworkRemoved","content":"&lt;/&gt; Server.Process:NetworkRemoved(...: any) → () NetworkRemoved event handler  "},{"title":"LogMessage​","type":1,"pageTitle":"Server.Process","url":"api/Server.Process#LogMessage","content":"&lt;/&gt; Server.Process:LogMessage( msg: string, msgType: MessageType , ...: any-- Additional data passed to Events.AdonisLogMessage or Events.LogMessage ) → () MessageOut event handler "},{"title":"Server.Remote.Commands","type":0,"sectionRef":"#","url":"api/Server.Remote.Commands","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#functions","content":" "},{"title":"GetKeys​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#GetKeys","content":"Remote Command &lt;/&gt; Server.Remote.Commands.GetKeys(p: Player ) → () Returns remote communication keys to the client if not already retrieved.  "},{"title":"VerifyRemote​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#VerifyRemote","content":"Remote Command &lt;/&gt; Server.Remote.Commands.VerifyRemote( p: Player ,-- Player t: string-- Test value ) → () Allows the client to verify integrity of the remote event  "},{"title":"ClientReady​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#ClientReady","content":"&lt;/&gt; Server.Remote.Commands.ClientReady(p: Player ) → () Triggered by clients when they are finished their setup process and are ready for normal communication.  "},{"title":"SessionData​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#SessionData","content":"&lt;/&gt; Server.Remote.Commands.SessionData( p: Player , sessionKey: string,-- Session key ...: any-- Data to be passed ) → () Allows the client to send data to a session their player is a member of. Handled by ServerSession.  "},{"title":"Setting​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#Setting","content":"&lt;/&gt; Server.Remote.Commands.Setting( p: Player , setting: string ) → settingvalue Returns a setting if that setting has ClientAllowed set to true in its declaration data.  "},{"title":"SetUserSettings​","type":1,"pageTitle":"Server.Remote.Commands","url":"api/Server.Remote.Commands#SetUserSettings","content":"&lt;/&gt; Server.Remote.Commands.SetUserSettings( p: Player , settings: table ) → () Updates UserSettings using data within the provided settings table in the format of [setting] = value "},{"title":"Server.Remote","type":0,"sectionRef":"#","url":"api/Server.Remote","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#functions","content":" "},{"title":"Send​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#Send","content":"&lt;/&gt; Server.Remote:Send( p: Player , cmd: string,-- Remote command ...: any-- Data ) → () Triggers a remote command on the target player's client with the data specified  "},{"title":"Get​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#Get","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Remote:Get( p: Player , cmd: string,-- Remote command ...: any-- Data ) → () Triggers a remote command on the target player's client with the data specified and returns the result (if any)  "},{"title":"LoadCode​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#LoadCode","content":"&lt;/&gt; Server.Remote:LoadCode( p: Player , code: string,-- Lua code ...: any-- Additional data ) → () Instructs the target client to run Lua code provided  "},{"title":"LoadCodeWithReturn​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#LoadCodeWithReturn","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Remote:LoadCodeWithReturn( p: Player , code: string,-- Lua code ...: any-- Additional data ) → () Instructs the target client to run Lua code provided and returns the result  "},{"title":"SendError​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#SendError","content":"&lt;/&gt; Server.Remote:SendError( player: Player , data: table-- Error data ) → () Sends error data to the client  "},{"title":"GetSession​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#GetSession","content":"&lt;/&gt; Server.Remote:GetSession( sessionKey: string-- Session key ) → ServerSession Returns the session associated with sessionKey if it exists Session Object  "},{"title":"NewSession​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#NewSession","content":"&lt;/&gt; Server.Remote:NewSession( users: table-- Optional table of users to add to the session on creation ) → ServerSession Creates a new session and returns its handler  "},{"title":"ProcessRemoteCommand​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#ProcessRemoteCommand","content":"&lt;/&gt; Server.Remote:ProcessRemoteCommand( p: Player ,-- Origin player cmd: string,-- Remote command recieved args: any-- Additional remote command arguments ) → any Handles processing of received remote commands from clients  "},{"title":"WaitForEvent​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#WaitForEvent","content":"&lt;/&gt; Server.Remote:WaitForEvent() → () Yields the current thread until the RemoteEvent and RemoteFunction objects exist and are ready for usage  "},{"title":"SetupClient​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#SetupClient","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Remote:SetupClient(p: Player ) → () Handles client setup process for player specified  "},{"title":"RemoteChangeDetected​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#RemoteChangeDetected","content":"&lt;/&gt; Server.Remote:RemoteChangeDetected(c: PropertyName) → () Remote communication object OnChange event handler  "},{"title":"SetupRemote​","type":1,"pageTitle":"Server.Remote","url":"api/Server.Remote#SetupRemote","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Remote:SetupRemote() → () Handles remote communication object setup process "},{"title":"Utilities","type":0,"sectionRef":"#","url":"api/Utilities","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Utilities","url":"api/Utilities#types","content":" "},{"title":"DefaultCacheData​","type":1,"pageTitle":"Utilities","url":"api/Utilities#DefaultCacheData","content":"&lt;/&gt; interface DefaultCacheData { Cache: {}-- Optional table to use for caching Timeout: int-- Optional default timeout for cache items; Defaults to infinite if no timeout is provided AccessResetsTimer: bool-- Bool indicated whether or not cache timers should be reset on data access } MemoryCache default data  "},{"title":"Services​","type":1,"pageTitle":"Utilities","url":"api/Utilities#Services","content":"&lt;/&gt; interface Services { index: string-- Table index corresponding to the requested service } Caches and returns Roblox services retrieved via game:GetService()  "},{"title":"Events​","type":1,"pageTitle":"Utilities","url":"api/Utilities#Events","content":"&lt;/&gt; interface Events { index: string-- Index corresponding to requested event } Responsible for all non-Roblox system events; Returns Event "},{"title":"Functions​","type":1,"pageTitle":"Utilities","url":"api/Utilities#functions","content":" "},{"title":"Warn​","type":1,"pageTitle":"Utilities","url":"api/Utilities#Warn","content":"&lt;/&gt; Utilities.Warn(...: any) → () Console warnings  "},{"title":"MemoryCache​","type":1,"pageTitle":"Utilities","url":"api/Utilities#MemoryCache","content":"&lt;/&gt; Utilities:MemoryCache(data: DefaultCacheData) → MemoryCache Returns a new MemoryCache object.  "},{"title":"RunFunction​","type":1,"pageTitle":"Utilities","url":"api/Utilities#RunFunction","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Utilities:RunFunction( func: function,-- Function to run ...: any-- Data to pass to ran function ) → () Runs the given function and outputs any errors. "},{"title":"Admin","type":0,"sectionRef":"#","url":"docs/Admin","content":"Admin","keywords":""},{"title":"Commands","type":0,"sectionRef":"#","url":"docs/Commands","content":"Commands","keywords":""},{"title":"Events","type":0,"sectionRef":"#","url":"docs/Events","content":"Events","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/intro","content":"Intro Documentation currently work in progress.","keywords":""},{"title":"ServerSession","type":0,"sectionRef":"#","url":"api/ServerSession","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#properties","content":" "},{"title":"Ended​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#Ended","content":"&lt;/&gt; ServerSession.Ended: bool Indicates whether this session has ended.  "},{"title":"NumUsers​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#NumUsers","content":"&lt;/&gt; ServerSession.NumUsers: int Number of users that are members of this session.  "},{"title":"NumActiveUsers​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#NumActiveUsers","content":"&lt;/&gt; ServerSession.NumActiveUsers: int Number of active users in this session.  "},{"title":"Data​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#Data","content":"&lt;/&gt; ServerSession.Data: {} Table that can be used to store session-specific data.  "},{"title":"Users​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#Users","content":"&lt;/&gt; ServerSession.Users: {} Session users.  "},{"title":"Events​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#Events","content":"&lt;/&gt; ServerSession.Events: {} Session event connections that will be cleaned up on session end.  "},{"title":"ActiveUsers​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#ActiveUsers","content":"&lt;/&gt; ServerSession.ActiveUsers: {} Active users.  "},{"title":"SessionKey​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SessionKey","content":"&lt;/&gt; ServerSession.SessionKey: string Session key.  "},{"title":"SessionEvent​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SessionEvent","content":"&lt;/&gt; ServerSession.SessionEvent: BindableEvent  Session event object. "},{"title":"Functions​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#functions","content":" "},{"title":"AddUser​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#AddUser","content":"&lt;/&gt; ServerSession:AddUser( p: Player , defaultData: table-- Optional table of default session data for the user ) → () Adds a user to the session  "},{"title":"RemoveUser​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#RemoveUser","content":"&lt;/&gt; ServerSession:RemoveUser(p: Player ) → () Removes a user from the session  "},{"title":"SetActiveUser​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SetActiveUser","content":"&lt;/&gt; ServerSession:SetActiveUser(p: Player ) → () Sets session user as active  "},{"title":"RemoveActiveUser​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#RemoveActiveUser","content":"&lt;/&gt; ServerSession:RemoveActiveUser(p: Player ) → () Sets session user as inactive  "},{"title":"SendToUsers​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SendToUsers","content":"&lt;/&gt; ServerSession:SendToUsers( ...: any-- Data to send to users ) → () Sends data to all active users in the session  "},{"title":"SendToAllUsers​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SendToAllUsers","content":"&lt;/&gt; ServerSession:SendToAllUsers( ...: any-- Data to send to users ) → () Sends data to all users in a session, regardless of whether or not they are marked as active  "},{"title":"SendToUser​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#SendToUser","content":"&lt;/&gt; ServerSession:SendToUser( p: Player , ...: any-- Data to send to use ) → () Sends data to a specific user if they are a session member  "},{"title":"FireEvent​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#FireEvent","content":"&lt;/&gt; ServerSession:FireEvent( ...: any-- Session data ) → () Fires the session event  "},{"title":"End​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#End","content":"&lt;/&gt; ServerSession:End() → () Ends the session  "},{"title":"ConnectEvent​","type":1,"pageTitle":"ServerSession","url":"api/ServerSession#ConnectEvent","content":"&lt;/&gt; ServerSession:ConnectEvent( func: function-- Function ) → () Connects a function to the session event "},{"title":"Packages","type":0,"sectionRef":"#","url":"docs/Packages","content":"Packages","keywords":""},{"title":"Settings","type":0,"sectionRef":"#","url":"docs/Settings","content":"Settings","keywords":""},{"title":"Utilities","type":0,"sectionRef":"#","url":"docs/Utilities","content":"Utilities","keywords":""},{"title":"Roles & Permissions","type":0,"sectionRef":"#","url":"docs/Permissions","content":"Roles &amp; Permissions","keywords":""}]