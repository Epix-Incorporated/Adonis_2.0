[{"title":"intro","type":0,"sectionRef":"#","url":"docs/intro","content":"intro Work in progress","keywords":""},{"title":"PackageHandler","type":0,"sectionRef":"#","url":"api/PackageHandler","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#functions","content":" "},{"title":"RunFunction​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#RunFunction","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PackageHandler.RunFunction( func: function,-- The function to run ...: any-- Package arguments ) → () Runs the given function and calls FormatError for any errors.  "},{"title":"GetMetadata​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetMetadata","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PackageHandler.GetMetadata( Package: Folder -- The package folder we're getting metadata from. ) → table-- Metadata table Returns the metadata for a given package  "},{"title":"GetServerPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetServerPackages","content":"&lt;/&gt; PackageHandler.GetServerPackages( Packages: table-- Table containing packages from which we will extract only server packages. ) → table-- Table containing found server packages. For a given folder, returns a list of all packages within that folder which are intended to be ran by the server. Result table format: {[name .. &quot;==&quot; .. version] = package }  "},{"title":"GetClientPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetClientPackages","content":"&lt;/&gt; PackageHandler.GetClientPackages( Packages: table-- Table containing packages to extract client packages from. ) → table-- Table containing found client packages. For a given folder, returns a list of all packages within that folder which are intended to be ran by the client. Result table format: {[name .. &quot;==&quot; .. version] = package }  "},{"title":"StripPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#StripPackages","content":"&lt;/&gt; PackageHandler.StripPackages( Packages: table,-- Table containing packages. Remove: string-- Name of children to remove. ) → table-- Packages that were stripped. Given a list of packages, this method will remove anything matching the provided &quot;Remove&quot; string and return a list of package clones without the removed object This is primarily used to strip the &quot;Server&quot; folder from packages which are shared by the server and client before sending said packages to the client  "},{"title":"FindDependency​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#FindDependency","content":"&lt;/&gt; PackageHandler.FindDependency( Packages: table,-- Table of packages. DependencyName: string,-- Searches for this dependency name. DependencyVersion: number-- Searches for this depdendency version (optional.) ) → string,package-- Returns the found package string (name==version) and the package itself. Given a list of packages (Packages), a package name (DepedencyName), and a package version (DepdencyVersion.) Checks if any packages in the provided package list match the provided name and version. This is used during dependency resolution.  "},{"title":"CheckDependencies​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#CheckDependencies","content":"&lt;/&gt; PackageHandler.CheckDependencies( Packages: table,-- Table of packages Package: Folder -- Package ) → () Given a list of packages (Packages) and a package (Package) checks if the package's depdencies are in the given package list This is used when loading packages to check if a given package's dependencies were correctly resolved and loaded before attempting to load the package that needs them return bool -- Returns true if package passes dependency check and returns false if it fails.  "},{"title":"GetOrderedPackageList​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#GetOrderedPackageList","content":"&lt;/&gt; PackageHandler.GetOrderedPackageList( Packages: table-- Table of packages ) → table-- Ordered table of packages based on depdency resolution. Given a table of packages (Packages), Resolves package dependencies and produces an ordered list the places packages after all of their dependencies. The results of this method determine load order, based on depedency resolution.  "},{"title":"InitPackage​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#InitPackage","content":"&lt;/&gt; PackageHandler.InitPackage( Package: Folder ,-- Package to initialize PackageType: string,-- Package type (Client or Server) ...: any-- Package arguments ) → () Given a package (Package) and a PackageType (Server, Client) this method will find and required the Initializer module for the given package and return the package's Init &amp; AfterInit functions in a table. return table -- Returned package init table  "},{"title":"LoadPackages​","type":1,"pageTitle":"PackageHandler","url":"api/PackageHandler#LoadPackages","content":"&lt;/&gt; PackageHandler.LoadPackages( Packages: table,-- Table of packages PackageType: string,-- Package type (Server, Client) ...: any-- Package arguments ) → () Given a table of packages, performs dependency resolution and loads all packages provided matching PackageType in order. "}]